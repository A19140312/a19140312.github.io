import ClipboardAction from"./clipboard-action";import Emitter from"tiny-emitter";import listen from"good-listener";class Clipboard extends Emitter{constructor(t,e){super();this.resolveOptions(e);this.listenClick(t)}resolveOptions(t={}){this.action=typeof t.action==="function"?t.action:this.defaultAction;this.target=typeof t.target==="function"?t.target:this.defaultTarget;this.text=typeof t.text==="function"?t.text:this.defaultText;this.container=typeof t.container==="object"?t.container:document.body}listenClick(t){this.listener=listen(t,"click",t=>this.onClick(t))}onClick(t){const e=t.delegateTarget||t.currentTarget;if(this.clipboardAction){this.clipboardAction=null}this.clipboardAction=new ClipboardAction({action:this.action(e),target:this.target(e),text:this.text(e),container:this.container,trigger:e,emitter:this})}defaultAction(t){return getAttributeValue("action",t)}defaultTarget(t){const e=getAttributeValue("target",t);if(e){return document.querySelector(e)}}static isSupported(t=["copy","cut"]){const e=typeof t==="string"?[t]:t;let i=!!document.queryCommandSupported;e.forEach(t=>{i=i&&!!document.queryCommandSupported(t)});return i}defaultText(t){return getAttributeValue("text",t)}destroy(){this.listener.destroy();if(this.clipboardAction){this.clipboardAction.destroy();this.clipboardAction=null}}}function getAttributeValue(t,e){const i=`data-clipboard-${t}`;if(!e.hasAttribute(i)){return}return e.getAttribute(i)}export default Clipboard;